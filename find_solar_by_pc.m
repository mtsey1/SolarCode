function [s] = find_solar_by_pc (s, meta)
  fprintf('Calculating solar corrections\n');
  solar_by_pc(length(meta.pclist),meta.Days,s.dark_start-s.dark_end+1)=0;
  new_solar_by_pc = solar_by_pc;
  tic;
  for k = 1:length(meta.pclist)
    % Index into solar_users  of those in post code k
%    if ~isempty(s.solar_users)
%        u = 1;
%    else
        u = find(meta.postcode(s.solar_users) == meta.pclist(k));
%    end
    
    % May have problems if some have very small cap factor
    % Only consider those that can generate >100W now
    if isempty(u)
        continue
    end
    mask  = (s.capFactor(u,:) > 0);
    big = (s.capFactor(u,:) .* s.solar_cap(u)' > 0.1);
    enough_big = any (big);
    mask(:, enough_big) = big(:, enough_big);
    sbp = zeros (size (mask));
    for j = 1:length (u)
      sbp(j,mask(j,:)) = s.seen(u(j), mask(j,:)) ./ s.capFactor(u(j), mask(j,:));
    end
    [sbp_max, idx] = max (sbp);
    solar_by_pc(k,:) = min (0.5, sbp_max);
%{    
    for i = 1:meta.Days
      for j = 0:(s.dark_start-s.dark_end)
        v = u(s.capFactor(u,i,j+1) ~= 0);       % Ignore non-generating panels
        if isempty(v)
            continue
        end
        w = v(s.capFactor(v,i,j+1) .* s.solar_cap(v)' > 0.1);
        %if (i == 1 && j == 0) fprintf('Postcode %d has %d solar users, with %d > 100W at day %d hour %d\n', pclist(k), length(u), length(v), i, (s.dark_end+j)/2); end
        if isempty(w)
            w = v;
        end
        
        % solar_by_pc  is the number of kwh per 30-min slot that would
        % be generated by a 1kW solar system if the sun is perpendicular
        [solar_by_pc(k,i,j+1), my_idx] = max(s.seen(w,i,j+1)./s.capFactor(w,i,j+1));
        idx(i,j+1) = find (u == w(my_idx));
        solar_by_pc(k,i,j+1) = min (solar_by_pc(k, i, j+1), 0.5);
      end
    end
%}
  end
  toc
  
  % Sanity checks.
  % If solar_by_pc varies greatly one day for some postcode, should for nearby
  % solar_by_pc should be similar for nearby postcodes
  
  % Make new_solar_by_pc the max of all neighbouring postcodes.
  for k = 1:length(meta.pclist)
    neighbours = meta.postcode_neighbours(meta.postcode_neighbours(:,1) ...
                                          == meta.pclist(k),:);
    [~, neighbours] = ismember(neighbours, meta.pclist);    % postcode->idx
    neighbours = neighbours(neighbours>0);
    if ~isempty(neighbours)
        new_solar_by_pc(k,:,:) = max(solar_by_pc(neighbours,:,:), [],1);
    end
  end
  s.solar_by_pc = new_solar_by_pc;

  solar_by_pc = new_solar_by_pc;
  save solar_by_pc solar_by_pc
end
